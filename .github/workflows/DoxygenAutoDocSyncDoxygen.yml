# -------------------------------------------------------------------
# This workflow file is dedicated to the public domain under CC0 1.0.
# See https://creativecommons.org/publicdomain/zero/1.0/
# -------------------------------------------------------------------
# 自动生成 SEVETEST30 文档(基于Doxygen)
# 当 SEVETEST30 仓库的关键分支有新的 push时(或者手动触发),自动在 Github 工作流中使用 Doxygen 生成文档,并提交新文档到文档仓库的同名分支
# 例如 SEVETEST30 名为 A 分支的推送,将触发文档仓库名为 A 分支的更新

# 以下是通过Doxygen自动生成官方文档的相关工作全流程(仅针对关键分支,如分支A)
# SEVETEST30仓库关键分支A的push
# -> DoxygenAutoDocSyncDoxygen触发
# -> DoxygenAutoDocSyncDoxygen调用doxygen-auto-code-to-doc
# -> doxygen-auto-code-to-doc触发,根据A分支代码生成文档并将更改推送到文档仓库的A分支
# (doxygen-auto-code-to-doc结束)
# -> DoxygenAutoDocSyncDoxygen调用OfficialDocSubmoduleSync
# -> OfficialDocSubmoduleSync触发,更新子模块,将更改推送到A分支的机器人分支并发起该分支到A分支的PR
# (OfficialDocSubmoduleSync结束)
# (DoxygenAutoDocSyncDoxygen结束)
# -> PR审查 -> 完成

# 文档生成和推送工作使用可复用工作流: https://github.com/701Enti/Github-WorkFlows/blob/master/.github/workflows/doxygen-auto-code-to-doc.yml (它存储在 701Enti 的专门工作流文件存储库)

# 为保证资源充足,只会为关键分支提供自动文档生成,具体会触发工作流的关键分支在下方"on"中可设置和查看
# 值得声明的是, SEVETEST30 文档仓库不是私有仓库,您完全可以push个人分支生成的文档到独立分支,甚至可以是您对SEVETEST30的见解等其他任何与SEVETEST30相关的内容,只要您没有影响自动文档或进行不合理的推送
# 当然,如果您希望自己的分支像关键分支一样可云端部署文档,您可以在本地运行 Doxygen 生成文档,并推送到 SEVETEST30 文档仓库与个人分支同名的分支,之后可联系 SEVETEST30 团队协商,他们管理文档的云端部署
# 更多信息可参考项目根目录README.md文件 - 文档相关
name: DoxygenAutoDocSyncDoxygen
on:
  push:
    branches: ["master"]
    # 防止文档仓库同步后,更新SEVETEST30仓库文档子模块时的push再次触发此工作流导致无限循环
    paths-ignore:
      - "docs/official/repo_doc/DOC-SEVETEST30"

  workflow_dispatch:

jobs:
  prepare:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    outputs:
      BRANCH_NAME: ${{ steps.set_output.outputs.BRANCH_NAME }}
      OWNER: ${{ steps.set_output.outputs.OWNER }}
      DOC_REPO: ${{ steps.set_output.outputs.DOC_REPO }}
      DOC_REPO_NAME: ${{ steps.set_output.outputs.DOC_REPO_NAME }}
      CODE_REPO_NAME: ${{ steps.set_output.outputs.CODE_REPO_NAME }}

    steps:
      - name: Wait for push to complete
        run: sleep 30

      - name: Checkout code with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set env
        run: |
          BRANCH_NAME_BUF=$(echo $GITHUB_REF | sed -e 's/.*\///')
          OWNER=$(echo ${{ github.repository }} | cut -d'/' -f1)
          REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)
          echo "BRANCH_NAME=$BRANCH_NAME_BUF" >> $GITHUB_ENV 
          echo "OWNER=$OWNER" >> $GITHUB_ENV 
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV

      - name: Set output
        id: set_output
        run: |
          echo "BRANCH_NAME=${{ env.BRANCH_NAME }}" >> $GITHUB_OUTPUT
          echo "OWNER=${{ env.OWNER }}" >> $GITHUB_OUTPUT
          echo "DOC_REPO=${{ env.OWNER }}/DOC-${{ env.REPO_NAME }}" >> $GITHUB_OUTPUT
          echo "DOC_REPO_NAME=DOC-${{ env.REPO_NAME }}" >> $GITHUB_OUTPUT
          echo "CODE_REPO_NAME=${{ env.REPO_NAME }}" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: codefile
          path: ./

  call-doxygen-auto-code-to-doc:
    needs: prepare
    uses: 701Enti/Github-WorkFlows/.github/workflows/doxygen-auto-code-to-doc.yml@master
    with:
      BRANCH_NAME: ${{ needs.prepare.outputs.BRANCH_NAME }}
      docRepo: ${{ needs.prepare.outputs.DOC_REPO }}
    secrets:
      docRepoSecret: ${{ secrets.ORG_DOC_SYNC_SECRET }}

  call-OfficialDocSubmoduleSync:
    needs: [prepare, call-doxygen-auto-code-to-doc]
    uses: 701Enti/SEVETEST30/.github/workflows/OfficialDocSubmoduleSync.yml@master
    with:
      UPDATE_BRANCH: ${{ needs.prepare.outputs.BRANCH_NAME }}
      docRepoName: ${{ needs.prepare.outputs.DOC_REPO_NAME }}
      codeRepoName: ${{ needs.prepare.outputs.CODE_REPO_NAME }}  

